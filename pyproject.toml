[project]
name = "exammaker"
dependencies = [
    "fpdf2~=2.8",
    "types-fpdf2",
    "marshmallow~=4.0",
    "Pillow~=11.2",
    "plusminus",
    "click"
]

[tool.poetry]
name = "exammaker"
version = "0.0.1"
description = "Tool for generating exams in PDF"
authors = [
    "Malcolm E. Davis <malcolm3davis@gmail.com>",
]
license = "MIT"
readme = "README.md"

documentation = "https://malcolm-3.github.io/exammaker"
homepage = "https://malcolm-3.github.io/exammaker"
repository = "https://github.com/malcolm-3/exammaker"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "exammaker", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.10, <4.0"

[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs-material = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"

[build-system]
requires = [
    "poetry-core>=1.0.0",
    "click",
    "poetry-bumpversion"
]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    ]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
    "PLR2004",  # Constants in assertions
    "SLF001",   # "Private member accessed"
    "E501",     # "Line too long"
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.pytest.ini_options]
addopts = """\
    --cov exammaker \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = true
follow_untyped_imports = true


# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
# [[tool.mypy.overrides]]
# module = [
#  "my_unpyted_dependency1.*",
#  "my_unpyted_dependency2.*"
# ]
# ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false

[tool.poetry.scripts]
exammaker = 'exammaker.cli:cli'

[tool.poetry_bumpversion.file."src/exammaker/__init__.py"]
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
